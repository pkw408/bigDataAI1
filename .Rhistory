df_raw <- data.frame(var1=c(1,2,1),var2=c(2,3,4))
df_var <- df_raw # 원본 데이터를 복사하여 df_raw 변수에 저장
df_var
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var3 = c(3,4,5)
df_var$var3
df_var
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var_sum <- df_var$var1 + df_var$var2
df_var$var_mean <- mean(df_var$var1,df_var$var2)
source('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var_sum <- df_var$var1 + df_var$var2
df_var$var_mean <- mean(df_var$var1,df_var$var2)
df_var
df_var$var_mean <- mean(df_var[,1])
df_var
df_var$var_mean <- mean(df_var$var1)
df_var
df_var$var_mean <- mean(df_var$var1)
df_var
df_var$var_mean <- mean(df_var$var1 + df_var$var2)
df_var
df_var$var_mean <- mean(df_var$var1[1,] + df_var$var2[1,])
df_var
df_var$var_mean <- mean(df_var$var1,df_var$var2)
df_var$var_mean[,] <- mean(df_var$var1,df_var$var2)
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var_sum <- df_var$var1 + df_var$var2
df_var$var_mean <- df_var$var_sum/2
df_var
excel_exam
excel_exam <- read_excel('excel_exam.xlsx',sheet=2)
excel_exam
df_excel_exam_copy$sum <- df_excel_exam_copy$math2 + df_excel_exam_copy$english2 + df_excel_exam_copy$science2
df_excel_exam_copy <- excel_exam
df_excel_exam_copy$sum <- df_excel_exam_copy$math2 + df_excel_exam_copy$english2 + df_excel_exam_copy$science2
df_excel_exam_copy
# 평균 파생변수
df_excel_exam_copy$var_mean <- df_excel_exam_copy$sum / 3
df_excel_exam_copy
# 함수
# subset() : 데이터프레임에서 특정 변수의 데이터만 뽑아낼 수 있다.
# subset(데이터프레임, select=시작변수명:끝변수명) # 연속적인 열 추출
# subset(데이터프레임, select=c(변수명, 변수명, ...)) #비 연속적인 열 추출
subset(df_excel_exam_copy, select=math2:science2)
subset(df_excel_exam_copy, select=c(math2,science2))
df_excel_exam_copy[,c('math2','science2')]
# rowSums(): 행의 ㅎ바을 계산할 수 있다.
df_excel_exam_copy$sum2 <- rowSums(subset(df_excel_exam_copy,select=math2:science2))
df_excel_exam_copy
df_excel_exam_copy_copy$PASS <- ifelse(df_excel_exam_copy$sum == df_excel_exam_copy$sum2, 'T', 'F')
df_excel_exam_copy_copy <- df_excel_exam_copy
df_excel_exam_copy_copy$PASS <- ifelse(df_excel_exam_copy$sum == df_excel_exam_copy$sum2, 'T', 'F')
df_excel_exam_copy_copy
# 2. 함수르 통한 파생변수 만들기 : transform()
# transform(데이터프레임, 파생변수이름=데이터)
df_excel_exam_copy <- transform(df_excel_exam_copy, sum3 = rowSums(subset(df_excel_exam_copy,select=math2:science2)))
rowSums(subset(df_excel_exam_copy,select=math2:science2))
source('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
df_excel_exam_copy
df_excel_exam_copy <- excel_exam
library(dplyr)
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
var_sum = rowSums(subset(df_excel_exam_copy,select=math2:science2)),
var_mean = rowMeans(subset(df_excel_exam_copy, select=math2:science2))
) # *****************************************
df_excel_exam_copy
df_excel_exam_copy$pass <- ifelse(df_excel_exam_copy$var_mean >= 60 , 'pass','fail')
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
grade = ifesle(var_mean>=90,'A',ifelse(var_mean>=80,'B',ifelse(var_mean>=70,'C',ifelse(var_mean>=60,'D','F'))))
)
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
grade = ifelse(var_mean>=90,'A',ifelse(var_mean>=80,'B',ifelse(var_mean>=70,'C',ifelse(var_mean>=60,'D','F'))))
)
df_excel_exam_copy
# 3. 함수를 통한 파생변수 만들기 : mutate() --> dplyr 패키지 안에 존재
# 한번에 여러개의 파생변수를 추가할 수 있다.
df_excel_exam_copy <- excel_exam
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
var_sum = rowSums(subset(df_excel_exam_copy,select=math2:science2)),
var_mean = rowMeans(subset(df_excel_exam_copy, select=math2:science2))
) # *****************************************
df_excel_exam_copy$result <- ifelse(df_excel_exam_copy$var_mean >= 60 , 'pass','fail')
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
grade = ifelse(var_mean>=90,'A',ifelse(var_mean>=80,'B',ifelse(var_mean>=70,'C',ifelse(var_mean>=60,'D','F'))))
)
df_excel_exam_copy # 확인
df_excel_exam_copy <- df_excel_exam
df_excel_exam_copy <- excel_exam
df_excel_exam_copy
df_excel_exam_copy_copy <- df_excel_exam_copy
# 함수
# filter() : 행 단위 데이터를 추출합니다.
df_excel_exam_copy %>% filter()
# 함수
# filter() : 행 단위 데이터를 추출합니다.
df_excel_exam_copy %>% filter(df_excel_exam_copy$class2 == 1)
df_excel_exam_copy %>%  filter(class2)
df_excel_exam_copy %>%  filter(class2 == 1 | class2 == 2 | class2 == 5)
# matching 연산자 in 과 c()함수를 이용하면 or 연산자와 같은 효과를 낼 수 있습니다.
df_excel_exam_copy %>%  filter(class %in% c(1,2,5))
# matching 연산자 in 과 c()함수를 이용하면 or 연산자와 같은 효과를 낼 수 있습니다.
df_excel_exam_copy %>%  filter(class2 %in% c(1,2,5))
install.packages(ggplot2)
# mpg 데이터를 활용하기 위해 ggplot2 패키지 설치
install.packages('ggplot2')
mpg
library(ggplot2)
mpg
# 제조사(manufacturer)가 audi인 조시주행연비(cty)의 평균을 출력
mpg_copy <- mpg
mpg_copy %>%  filter(manufacturer == 'audi')
mean(mpg_copy$cty)
mean(mpg_copy$cty)
# 제조사(manufacturer)가 audi인 조시주행연비(cty)의 평균을 출력
mpg_audi <- mpg %>%  filter(manufacturer == 'audi')
mean(mpg_copy$cty)
# 제조사(manufacturer)가 audi인 조시주행연비(cty)의 평균을 출력
mpg_audi <- mpg %>%  filter(manufacturer == 'audi')
mean(mpg_audi$cty)
# 제조사(manufacturer)가 toyota 인 도시주행연비(cty)의 평균을 출력
mpg_toyota <- mpg %>% filter(manufacturer == 'toyota')
mean(mpg_toyota$cty)
# 제조사가 chevrolet, ford, honda 인 자동차의 고속도록주행연비(hwy) 전체 평균 출력
mpg_ch_ford_honda <- mpg %>%  filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda')
mean(mpg_ch_ford_honda$hwy)
boxplot(mpg_ch_ford_honda)
boxplot(x=mpg_ch_ford_honda, y=mpg_ch_ford_honda)
# table() : 데이터의 항목(빈도수)
table(mpg_ch_ford_honda$manufacturer)
# select() : 열 단위 데이터 추출하기
df_excel_exam_copy %>% select(math2,english2,science2)
df_excel_exam_copy %>%  select2(-math2, -science2)
df_excel_exam_copy %>%  select(-math2, -science2)
# 문제
# class2가 1인 데이터 중에서 class2, math2 과목만 출력
df_excel_exam_copy %>% filter(class2==1) %>%  select(class2,math2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class=1|class2=3|class2=5) %>% select(class2,science2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class=1|class2=3|class2=5) %>% select(class2,science2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class==1|class2==3|class2==5) %>% select(class2,science2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class2==1|class2==3|class2==5) %>% select(class2,science2)
df_class135_science <-df_excel_exam_copy %>%  filter(class2 %in% c(1,3,5)) %>% select(class2,science2)
debugSource('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
df_excel_exam_copy %>%  filter(class2 %in% c(1,3,5)) %>% select(class2,science2) # 두가지 방법 가능
df_class135_science <-df_excel_exam_copy %>%  filter(class2 %in% c(1,3,5)) %>% select(class2,science2)
df_class135_science
head(df_class135_science,3)
tail(df_class135_science,3)
# arrage() : 데이터를 정렬
df_excel_exam_copy %>% arrange(math2)
# arrange() : 데이터를 정렬
df_excel_exam_copy %>% arrange(math2) # 오름차순 정렬
df_excel_exam_copy %>% arrange(desc(math2)) # 내림차순 정렬
# math2 점수로 내림차순 후, math2 점수가 같을 경우, science2 점수로 내림차순 정렬 후 5등까지 출력
df_rank5_science2 <- df_excel_exam_copy %>% arrange(desc(math2)) %>%  filter(math2) %>% arrange(desc(science2))
# math2 점수로 내림차순 후, math2 점수가 같을 경우, science2 점수로 내림차순 정렬 후 5등까지 출력
df_rank5_science2 <- df_excel_exam_copy %>% arrange(desc(math2),desc(science2)) # 2차 정렬해줌
head(df_rank5_science2,5)
library(ggplot2)
mpg
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
mpg %>%  filter(manufacturer == 'audi') %>%  arrange(desc(hwy)) %>% tail(5)
library(ggplot2)
mpg
mpg %>%  filter(manufacturer == 'audi') %>%  arrange(desc(hwy)) %>% tail(5)
library(dplyr)
library(ggplot2) # mpg를 사용하기 위해해
mpg %>%  filter(manufacturer == 'audi') %>%  arrange(desc(hwy)) %>% tail(5)
mpg_copy <- mpg
mpg_copy$var_sum <- rowSums(subset(mpg_copy,select=c(cty,hwy)))
mpg_copy$var_mean <- rowMeans((subset(mpg_copy,select=c(cty,hwy))))
mpg_copy <- mpg
mpg_copy$var_sum <- rowSums(subset(mpg_copy,select=c(cty,hwy)))
mpg_copy$var_mean <- rowMeans((subset(mpg_copy,select=c(cty,hwy))))
mpg_copy %>% select(manufacturer,model,var_mean) %>% arrange(desc(var_mean),3)
mpg %>% mutate(
total = cty + hwy,
mean = total / 2
) %>%  select(manufacturer,model,var_mean) %>% arrange(desc(var_mean),3)
mpg %>% mutate(
total = cty + hwy,
mean = total / 2
) %>%  select(manufacturer,model,var_mean) %>% arrange(desc(mean),3)
mpg %>% mutate(
total = cty + hwy,
mean = total / 2
) %>%  select(manufacturer,model,mean) %>% arrange(desc(mean),3)
mpg %>% mutate(
total = cty + hwy,
mean = total / 2
) %>%  select(manufacturer,model,mean) %>% arrange(desc(mean)) %>%  head(3)
mpg_copy <- mpg
mpg_copy$var_sum <- rowSums(subset(mpg_copy,select=c(cty,hwy)))
mpg_copy$var_mean <- rowMeans((subset(mpg_copy,select=c(cty,hwy))))
mpg_copy %>% select(manufacturer,model,var_mean) %>% arrange(desc(var_mean),3) %>%  head(3)
mpg_copy %>% select(manufacturer,model,var_mean) %>% arrange(desc(var_mean)) %>%  head(3)
df_excel_exam_copy %>% mutate(mean_math = mean(math2))
# group_by() 함수를 사욧ㅇ하여 먼저 그룹을 맺어주고 summarise() 함수를 사용해 요약할 수 있다.
df_excel_exam_copy %>% group_by(class2) %>%  summarise(mean_math2 = mean(math2))
df_excel_exam_copy %>%  group_by(class2) %>%  summarise(
합계 = sum(math2)
평균 = mean(math2)
개수 = n()
최대값 = max(math2)
최소값 = min(math2)
표준편차 = sd(math2)
)
df_excel_exam_copy %>%  group_by(class2) %>%  summarise(
합계 = sum(math2),
평균 = mean(math2),
개수 = n(),
최대값 = max(math2),
최소값 = min(math2),
표준편차 = sd(math2)
)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% filter(class  = 'suv')
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% filter(class  == 'suv')
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% filter(class  == 'suv') %>% summarise(
total = cty + hwy,
mean = total / 2
) %>% arrange(desc(mean))
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% filter(class  == 'suv') %>% summarise(
total = cty + hwy,
mean = total / 2
) %>% arrange(desc(mean)) %>%  head(5)
# 차종별 class로 도시연비평균(cty) 의평균을 계산해서 평균이 높은 순서대로 출력합니다.
mpg %>%  group_by(class) %>% summarise(mean_cty = mean(cty))
# 차종별 class로 도시연비평균(cty) 의평균을 계산해서 평균이 높은 순서대로 출력합니다.
mpg %>%  group_by(class) %>% summarise(mean_cty = mean(cty)) %>%  arrange(desc(mean_cty))
# 고속도로연비의 평균이 가장 높은 회사 3곳 출력
mpg %>% group_by(class) %>%  summarise(mean_hwy = mean(hwy)) %>%  arrange(desc(mean_hwy))
# 고속도로연비의 평균이 가장 높은 회사 3곳 출력
mpg %>% group_by(class) %>%  summarise(mean_hwy = mean(hwy)) %>%  arrange(desc(mean_hwy)) %>%  head(3)
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(class) %>% filter(class == 'compact')
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(class)
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(class) %>%  summarise(개수 = n())
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% filter(class == 'compact') %>%  summarise(개수 = n())
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact') %>%  summarise(개수 = n())
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact') %>%  summarise(compact_개수 = n()) %>% arrange(desc(compact_개수))
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact')  = n()) %>% arrange(desc(compact_개수))
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact')  %>% arrange(desc(compact_개수))
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact')
%>%  summarise(compact_개수 = n()) %>% arrange(desc(compact_개수))
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact') %>%  summarise(compact_개수 = n()) %>% arrange(desc(compact_개수))
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% filter(class  == 'suv') %>% summarise(
total = cty + hwy,
mean = total / 2
) %>% arrange(desc(mean)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% filter(class  == 'suv') %>% summarise(
total = cty + hwy,
mean = total / 2
) %>% arrange(desc(mean)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% summarise(
total = cty + hwy,
mean = total / 2
) %>% arrange(desc(mean)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% summarise(
mean = (cty + hwy) / 2
) %>% arrange(desc(mean)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% mutate(
avg = (cty + hwy) / 2
) %>% summarise(avg_mean = mean(avg)) %>% arrange(desc(mean)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% mutate(
avg = (cty + hwy) / 2
) %>% summarise(avg_mean = mean(avg)) %>% arrange(desc(avg_mean)) %>%  head(5)
# 차종별 class로 도시연비평균(cty) 의평균을 계산해서 평균이 높은 순서대로 출력합니다.
mpg %>%  group_by(manufacturer) %>% summarise(mean_cty = mean(cty)) %>%  arrange(desc(mean_cty))
# 차종별 class로 도시연비평균(cty) 의평균을 계산해서 평균이 높은 순서대로 출력합니다.
mpg %>%  group_by(class) %>% summarise(mean_cty = mean(cty)) %>%  arrange(desc(mean_cty))
# 고속도로연비의 평균이 가장 높은 회사 3곳 출력
mpg %>% group_by(manufacturer) %>%  summarise(mean_hwy = mean(hwy)) %>%  arrange(desc(mean_hwy)) %>%  head(3)
# 각 회사별 경차(compact)의 차종(class) 수를 내림차순으로 정렬해 출력합니다.
mpg %>% group_by(manufacturer) %>%  filter(class == 'compact') %>%  summarise(compact_개수 = n()) %>% arrange(desc(compact_개수))
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% mutate(
avg = (cty + hwy) / 2
) %>% summarise(avg_mean = mean(avg)) %>% arrange(desc(avg)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% mutate(
avg = (cty + hwy) / 2
) %>% summarise(avg_mean = mean(avg)) %>% arrange(desc(avg)) %>%  head(5)
# 문제
# mpg 데이터에서 자동차회사별로 차종(class)이 'suv'인 자동차의 cty와 hwy의 평균을 계산해서 내림차순으로 정렬하고 상위 5개 출력
mpg %>% group_by(manufacturer)%>% filter(class  == 'suv') %>% mutate(
avg = (cty + hwy) / 2
) %>% summarise(avg_mean = mean(avg)) %>% arrange(desc(avg_mean)) %>%  head(5)
test1 <- data.frame(id=c(1,2,3,4,5), middle=c(60,80,70,90,85))
test2 <- data.frame(id=c(1,2,3,4,5), middle=c(70,83,63,95,80))
left_join(test1,tes2,by='id')
left_join(test1,tes2,by='id')
left_join(test1,test2,by='id')
df_excel_join <- excel_exam
df_excel_join <- excel_exam
df_excel_join
class(df_excel_join)
class(df_excel_join)
df_teacher_name <- data.frame(class2=c(1,2,3,4,5), teacher=c('김사과','오렌지','반하나','이메론','류정원'))
df_teacher_name
left_join(df_excel_join,df_teacher_name,by='class') # left_join()으로 합치기를 실행할때 두개의 데이터프레임 행(데이터)의 개수가 반드시 같을 필요는 없다
df_excel_join <- excel_exam
df_teacher_name <- data.frame(class2=c(1,2,3,4,5), teacher=c('김사과','오렌지','반하나','이메론','류정원'))
left_join(df_excel_join,df_teacher_name,by='class') # left_join()으로 합치기를 실행할때 두개의 데이터프레임 행(데이터)의 개수가 반드시 같을 필요는 없다
left_join(df_excel_join,df_teacher_name,by='class2') # left_join()으로 합치기를 실행할때 두개의 데이터프레임 행(데이터)의 개수가 반드시 같을 필요는 없다
# bind_rows() : 새로롤 데이터를 합칠 수 있다.
group1 <- data.frame(id=c(1,2,3,4,5),test=c(60,70,80,90,100))
group2 <- data.frame(id=c(6,7,8,9,10),test=c(70,90,30,50,60))
bind_rows(group1,group2)
# bind_rows() : 새로롤 데이터를 합칠 수 있다.
group1 <- data.frame(id=c(1,2,1,4,5),test=c(60,70,80,90,100))
group2 <- data.frame(id=c(6,7,8,9,10),test=c(70,90,30,50,60))
bind_rows(group1,group2)
df_na <- data.frame(gender=c('M','F',NA,'F','M'),score=c(5,4,3,2,NA))
df_na
# is.na() : 데이터에 결측지가 포함되어 있는지 여부를 확인할 수 있다.
# 결측지는 TRUE, 결측치가 아니면 FALSE로 표시된다.
is.na(df_na)
# 빈도수를 알아내는 함수 : table()
# is.na(), table() 두 가지 함수를 이용해 결측지의 빈도수를 파악할 수 있다.
table(is.na(df_na))
table(is.na(df_na$gender))
table(is.na(df_na$score))
table(is.na(df_na$score))
# 결측치가 포함된 데이터를 함수에 적용시키면 정상적으로 연산되지 않고 NA가 출력됩니다.
sum(df_na$score)
mean(df_na$score)
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_na %>% filter(gender != NA & score != NA)
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no-na <- na %>% filter(!is.na(score)&!is.na(gender))
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no-na <- na %>% filter(!is.na(score))
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no)na <- na %>% filter(!is.na(score))
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no)na <- na %>% filter(!is.na(score))
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no_na <- na %>% filter(!is.na(score))
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no_na <- df_na %>% filter(!is.na(score))
# 결측치를 처리하는 방법
# 1. dplyr 패키지의 filter()를 사용해서 결측치를 제외한 데이터만 추출
df_no_na <- df_na %>% filter(!is.na(score)&!is.na(gender))
df_no_na
sum(df_no_na)
sum(df_no_na)
# gender에서 NA가 아니고 score도 NA가 아닌 데이터 추출
df_no_na <- df_na %>% filter(!is.na(score)&!is.na(gender))
sum(df_no_na)
sum(df_no_na$score)
mean(df_no_na$score)
# 2. na.omit() 함수를 사용해서 결측치가 있는 모든 행을 한꺼번에 제거
df_no_na <- na.omit(df_na)
df_no_na
sum(df_no_na$score)
mean(df_no_na$score)
#3. 함수를 실행할때 na.rm=T 속성을 지정하면 결측치를 제외하고 함수를 실행
sum(df_no_na$score,na.rm=T)
mean(df_no_na$score,na.rm=T)
max(df_no_na$score,na.rm=T)
min(df_no_na$score,na.rm=T)
df_excel_exam_na[c(20,'science2'] <- NA
df_excel_exam_na[20,'science2'] <- NA
df_excel_exam_na[c(3,8,15), 'math2'] <- NA
# 실습
df_excel_exam_na <- excel_exam
df_excel_exam_na[c(3,8,15), 'math2'] <- NA
df_excel_exam_na[20,'science2'] <- NA
df_excel_exam_na
df_excel_exam_na %>%  group_by(class2)
df_excel_exam_na %>%  group_by(class2)
df_excel_exam_na %>%  group_by(class2) %>%  summarise(
math_sum = sum(math2)
)
df_excel_exam_na  %>%  summarise(
math_sum = sum(math2)
)
df_excel_exam_na %>%  group_by(class2) %>%  summarise(
math_sum = sum(math2,rm_na=T)
)
df_excel_exam_na %>%  group_by(class2) %>%  summarise(
math_sum = sum(math2,na.rm=T)
)
df_excel_exam_na %>%  group_by(class2) %>%  summarise(
math_sum = sum(math2,na.rm=T),
math_mean = mean(meath2, na.rm=T),
math_count = n()
)
df_excel_exam_na %>%  group_by(class2) %>%  summarise(
math_sum = sum(math2,na.rm=T),
math_mean = mean(math2, na.rm=T),
math_count = n()
)
# 결측치의 개수를 세지 않으려면 filter() 함수를 사용하여 미리 결측치를 걸러내고 계산한다.
df_excel_exam_na %>% group_by(class2) %>%  filter(is.na(math2)) %>%  summarise(
math_sum = sum(math2,na.rm=T),
math_mean = mean(math2, na.rm=T),
math_count = n() # 개수는 NA가 포함되어 출력력.
)
# 결측치의 개수를 세지 않으려면 filter() 함수를 사용하여 미리 결측치를 걸러내고 계산한다.
df_excel_exam_na %>% group_by(class2) %>%  filter(!is.na(math2)) %>%  summarise(
math_sum = sum(math2,na.rm=T),
math_mean = mean(math2, na.rm=T),
math_count = n() # 개수는 NA가 포함되어 출력력.
)
# filter()대신 na.omit()를 사용하여 사용가능
# 단, na.omit() 함수는 특정열만 na를 제거하는게 아니라 전체데이터의 na를 제거한다.
na.omit(df_excel_exam_na) %>% group_by(class2) %>%  summarise(
math_sum = sum(math2,na.rm=T),
math_mean = mean(math2, na.rm=T),
math_count = n() # 개수는 NA가 포함되어 출력력.
)
# d. ifelse() 사용하여 결측치가 아닌 데이터로의 평균값으로 대체합니다.
# 데이터의 평균이나 중위수 처럼 특정 데이터 집단을 대표할 수 있는 값으로 대체시켜 사용한다.
# 순서
# da. NA를 제외한 math와 science의 평균을 게산한다.
mean(df_excel_exam_na$math2,na.rm=T)
mean(df_excel_exam_na$science2,na.rm=T)
#
df_excel_exam_na$math2 <- ifelse(is.na(df_excel_exam_na$math2),mean_math2,df_excel_exam_na$math2)
# d. ifelse() 사용하여 결측치가 아닌 데이터로의 평균값으로 대체합니다.
# 데이터의 평균이나 중위수 처럼 특정 데이터 집단을 대표할 수 있는 값으로 대체시켜 사용한다.
# 순서
# da. NA를 제외한 math와 science의 평균을 게산한다.
mean_math2 <- mean(df_excel_exam_na$math2,na.rm=T)
mean_science2 <- mean(df_excel_exam_na$science2,na.rm=T)
#
df_excel_exam_na$math2 <- ifelse(is.na(df_excel_exam_na$math2),mean_math2,df_excel_exam_na$math2)
df_excel_exam_na$science2 <- ifselse(is.na(df_excel_exam_na$science2),mean_science2,df_excel_exam_na$science2)
df_excel_exam_na$science2 <- ifelse(is.na(df_excel_exam_na$science2),mean_science2,df_excel_exam_na$science2)
df_excel_exam_na
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
# gender는 1~5까지의 데이터만 가질 수 있고, score는 1~10까지만 데이터로 가질 수 있다.
outliers <- data.frame(gender = c(1,2,1,3,5,1,9,2,2,1), score = c(5,6,9,1,4,6,2,0,10,7))
outliers
# table()를 사용해서 이상치가 존재하는지 확인
table(outliers$gender)
table(outliers$score)
# 이상치가 존재할 경우, ifelse() 함수를 결측치로 변환한다.
outliers$gender <- ifelse(outliers$gender > 5, NA, outliers$gender)
outliers$gender
# table()를 사용해서 이상치가 존재하는지 확인
table(outliers$gender)  # 9는 이상한 데이터
outliers$score <- ifelse(outliers$score >0 $ outliers$score <= 10 , outliers$score, NA)
table(outliers$score)   # 0은 이상한 데이터   --> 이상데이터 확인
outliers$score <- ifelse(outliers$score >0 $ outliers$score <= 10 , outliers$score, NA)
outliers$score <- ifelse(outliers$score > 0 $ outliers$score <= 10, outliers$score, NA)
outliers$score <- ifelse(outliers$score > 0 & outliers$score <= 10, outliers$score, NA)
table(outliers$score)   # 0은 이상한 데이터   --> 이상데이터 확인
library(ggplot2)
# 1. 그래프가 출력될 배경을 만듭니다.
# ggplot(data=데이터프레임, aes=(x=가로축,y=세로축))
ggplot2(data=mpg, aes=(x=hwy,y=cty))
# 1. 그래프가 출력될 배경을 만듭니다.
# ggplot(data=데이터프레임, aes=(x=가로축,y=세로축))
ggplot(data=mpg, aes=(x=hwy,y=cty))
library(ggplot2)
# 1. 그래프가 출력될 배경을 만듭니다.
# ggplot(data=데이터프레임, aes=(x=가로축,y=세로축))
ggplot(data=mpg, aes=(x=hwy,y=cty))
# 1. 그래프가 출력될 배경을 만듭니다.
# ggplot(data=데이터프레임, aes(x=가로축,y=세로축))
ggplot(data=mpg, aes(x=hwy, y=cty))
