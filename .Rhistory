# 데이터프레임의 class열에 저장된 값이 1인 행만 선택
csv_exam[csv_exam$class > 1]
# 데이터프레임의 class열에 저장된 값이 1인 행만 선택
csv_exam[csv_exam$class == 1]
# 데이터프레임의 class열에 저장된 값이 1인 행만 선택
csv_exam[csv_exam$class == 1,]
# 데이터프레임의 class열에 저장된 값이 1인 행만 선택
csv_exam[,csv_exam$class == 1]
# 데이터프레임의 math열에 저장된 데이터가 80이상인 행만 선택
csv_exam[csv_exam$math >= 80,]
# 데이터프레임의 math열에 저장된 데이터가 80이상인 행만 선택
csv_exam[,csv_exam$math >= 80]
# 데이터프레임의 math열에 저장된 데이터가 80이상인 행만 선택
csv_exam[csv_exam$math >= 80,]
# 데이터프레임의 math열에 저장된 데이터가 80이상인 행만 선택
csv_exam[csv_exam$math >= 80]
# 데이터프레임의 math열에 저장된 데이터가 80이상인 행만 선택
csv_exam[csv_exam$math >= 80,]
# 데이터프레임의 math열에 저장된 데이터가 80이상인 행만 선택
csv_exam[csv_exam$math >= 80]
csv_exam$math >= 80
package(ggplot2)
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[csv_exam&class == 1 && csv_exam$english >=90]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam&class == 1 && csv_exam$english >= 90),]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[csv_exam&class == 1, && csv_exam$english >= 90,]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam&class == 1 && csv_exam$english >= 90),]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam$english >= 90),]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam&class == 1 && csv_exam$english >= 90),]
source('C:/KyoungPark/R/Day3.R', encoding = 'UTF-8', echo=TRUE)
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[csv_exam&class == 1,]
csv_exam[csv_exam$class == 1&& csv_exam$english >= 90,]
csv_exam[(csv_exam$class == 1 && csv_exam$english >= 90),]
csv_exam[(csv_exam$class == 1 && csv_exam$english >= 90),]
csv_exam[(csv_exam$class == 1 && csv_exam$english >= 90),]
csv_exam[(csv_exam$class == 1 && csv_exam$english >= 90),]
# 데이터프레임의 class열에 저장된 값이 1인 행만 선택
csv_exam[(csv_exam$class == 1,]
# 데이터프레임의 class열에 저장된 값이 1인 행만 선택
csv_exam[csv_exam$class == 1,]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam$class == 1 && csv_exam$english >= 90),]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam$class == 1 && csv_exam$english >= 90),]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
csv_exam[(csv_exam$class == 1 || csv_exam$english >= 90),]
# 데이터프렝미의 class열에 저장된 데이터가 1이고, english열에 데이터가 90이상인 행만 선택
# && : 스칼라 경우 (||)
# & : 백터연산 (|)
csv_exam[(csv_exam$class == 1 & csv_exam$english >= 90),]
# 데이터프레임의 math열에 저장된 데이터가 50이하이거나, english열에 저장된 데이터가 50이하인 행만
csv_exam[(csv_exam$math <= 50 | csv_exam$english <= 50),]
csv_exam_noheader <- read.csv('csv_exam_noheader,csv')
csv_exam_noheader <- read.csv('csv_exam_noheader.csv')
csv_exam_noheader
csv_exam_noheader <- read.csv('csv_exam_noheadercsv',header=F)
csv_exam_noheader <- read.csv('csv_exam_noheadercsv',header=F)
csv_exam_noheader <- read.csv('csv_exam_noheader.csv',header=F)
csv_exam_noheader
colnames(csv_exam_noheader) <- NULL
csv_exam_noheader
colnames(csv_exam_noheader) <- c['id','class','math','english','science']
csv_exam_noheader
colnames(csv_exam_noheader) <- c['id','class','math','english','science']
colnames(csv_exam_noheader) <- c('id', 'class' , 'math' , 'english' , 'science')
csv_exam_noheader
# 외부 페키지를 받아보기
# install.packages('페키지이름') --> 패키지 이름에 꼭!!! 따옴표를 붙여야한다.
install.packages('dplyr')
rename()
dplyr.rename()
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr) # 메모리에 로드시킬때에는 따옴표를 사용하지 않는다. 위 패키지를 메모리에 올려줘야 직접 사용할 수 있다.
library(ggplot2)
rename()
rename() ??
rename()
rename() ??
df
rename(csv_exam_copy, csv_exam_copy$maaaa=csv_exam_copy$math  )
csv_exam_copy <- rename(csv_exam_copy, csv_exam_copy$maaaa = csv_exam_copy$math)
csv_exam_copy <- rename(csv_exam_copy, 'maaaa'' = 'math')
csv_exam_copy <- rename(csv_exam_copy, maaaa = math)
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'math')
# 1. rename() --> 데이터프레임의 열 이름을 변경하기 위한 함수
# rename(데이터 프레임이룸, 새이름 = 기존이름, 새이름, 기존이름, ...)
csv_exam_copy <- csv_exam_noheader # 데이터 원본의 훼손을 막는다.
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'math')
csv_exam_copy
csv_exam_noheader <- read.csv('csv_exam_noheader.csv',header=F) # 데이터 손실을 막는다.
colnames(csv_exam_noheader) <- NULL # 첫번째 열이름을 날려버린다.
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'math')
colnames(csv_exam_noheader) <- c('id', 'class' , 'math' , 'english' , 'science') # 열 이름 달아주기
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'math')
# 1. rename() --> 데이터프레임의 열 이름을 변경하기 위한 함수
# rename(데이터 프레임이룸, 새이름 = 기존이름, 새이름, 기존이름, ...)
csv_exam_copy <- csv_exam_noheader # 데이터 원본의 훼손을 막는다.
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'math')
csv_exam_copy
# 1. rename() --> 데이터프레임의 열 이름을 변경하기 위한 함수
# rename(데이터 프레임이룸, 새이름 = 기존이름, 새이름, 기존이름, ...)
csv_exam_noheader <- read.csv('csv_exam_noheader.csv',header=F) # 데이터 손실을 막는다
csv_exam_copy <- csv_exam_noheader # 데이터 원본의 훼손을 막는다.
# 1. rename() --> 데이터프레임의 열 이름을 변경하기 위한 함수
# rename(데이터 프레임이룸, 새이름 = 기존이름, 새이름, 기존이름, ...)
csv_exam_noheader <- read.csv('csv_exam_noheader.csv',header=F) # 데이터 손실을 막는다
csv_exam_copy <- csv_exam_noheader # 데이터 원본의 훼손을 막는다.
csv_exam_copy
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'v1')
csv_exam_copy <- rename(csv_exam_copy, 'maaaa' = 'V1')
csv_exam_copy
csv_exam_copy <- rename(csv_exam_copy, id=V1, class = V2, math=V3, english=V4, science=V5)
# 1. rename() --> 데이터프레임의 열 이름을 변경하기 위한 함수
# rename(데이터 프레임이룸, 새이름 = 기존이름, 새이름, 기존이름, ...)
csv_exam_noheader <- read.csv('csv_exam_noheader.csv',header=F) # 데이터 손실을 막는다
csv_exam_copy <- csv_exam_noheader # 데이터 원본의 훼손을 막는다.
csv_exam_copy <- rename(csv_exam_copy, id=V1, class = V2, math=V3, english=V4, science=V5)
source('C:/KyoungPark/R/Day3.R', encoding = 'UTF-8', echo=TRUE)
csv_exam_copy
# excel 파일을 읽어오려면, readxl 패키지를 설치하고 로드한 후 사용합니다.
install.packages('readxl')
library(readxl)
excel_exam <- read_excel('excel_exam.xlsx')
excel_exam <- read_excel('excel_exam.xlsx') --> csv 와 데이터를 불러오는 방식이 조금 다르다.
excel_exam <- read_excel('excel_exam.xlsx') #--> csv 와 데이터를 불러오는 방식이 조금 다르다.
excel_exam <- read_excel('excel_exam.xlsx') #--> csv 와 데이터를 불러오는 방식이 조금 다르다.
excel_exam
# 읽어올 excel 파일의 첫번빼 줄이 열 이름이 아닌 경우 col_names=F 옵션으로 저장하여 읽어옵니다.
excel_exam_noheader <- read.excel('excel_exam_nohear',col_names=F)
# 읽어올 excel 파일의 첫번빼 줄이 열 이름이 아닌 경우 col_names=F 옵션으로 저장하여 읽어옵니다.
excel_exam_noheader <- read_excel('excel_exam_nohear',col_names=F)
# 읽어올 excel 파일의 첫번빼 줄이 열 이름이 아닌 경우 col_names=F 옵션으로 저장하여 읽어옵니다.
excel_exam_noheader <- read_excel('excel_exam_noheader',col_names=F)
# 읽어올 excel 파일의 첫번빼 줄이 열 이름이 아닌 경우 col_names=F 옵션으로 저장하여 읽어옵니다.
excel_exam_noheader <- read_excel('excel_exam_noheader.xlsx',col_names=F)
excel_exam_noheader
excel_exam_noheader_copy <- rename(excel_exam_noheader_copy, id=...1, class=...2, math=...3,english=...4,science=...5)
excel_exam_noheader_copy <- rename(excel_exam_noheader_copy, id='...1', class='...2', math='...3',english='...4',science='...5')
# 열 이름 바꿔주기
excel_exam_noheader_copy <- excel_exam_noheader
excel_exam_noheader_copy <- rename(excel_exam_noheader_copy, id='...1', class='...2', math='...3',english='...4',science='...5')
excel_exam_noheader_copy
excel_exam
# 읽어올 excel 파일에 sheet가 여러개 있을 경우 특정 시트의 데이터를 읽어오려면 sheet=n(n=읽어올 sheet 위치
# ) 또는 sheet='시트이름' 옵션을 지정해서 불러옵니다.
excel_exam <- read_excel('excel_exam.xlsx', sheet=2)
excel_exam
# tibble 은 사용하는 패키지에 따라 사용할 수 없는 함수들이 많으므로 데이터프레임으로 변환시키고 사용하는것 일반적이다.
# as.data.frame()
excel_exam <- as.data.frame(excel_exam)
excel_exam
# 외부로 파일을 내보낸 법
# write.csv(데이터프레임, file='파일명')
write.csv(excel_exam,file='df_excel_exam2.csv',row.names=F)
# 엑셀 파일을 읽고 쓰러면 xlsx 패키지를 설치해야한다.
# 1. xlsx 패키지는 자바JDK 가 설치되야 사용가능하다.
#    http://java.sun.com
#    Java SE 8u261 -->  JDK Download --> windows x64 Download
# 2. 자바가 설치되있는 jdk.1.8.0_251/bin 폴더의 환경변수를 등록시켜준다.
# 내 PC(우측버튼) --> 속성 --> 고급시스템설정 --> 환경변수 --> 시스템변수에서 path 편집 --> 새로 만들기 --> C:\Program Files\Java\jdk1.8.0_251\bin 등록
install.packages('xlsx')
library(xlsx)
library(xlsx)
write.xlsx(excel_exam, "df_excel_exam2.xlsx")
write.xlsx(excel_exam, "df_excel_exam2.xlsx", row.names=F)
write.xlsx(excel_exam, "df_excel_exam2.xlsx", row_names=F)
write.xlsx(excel_exam, "df_excel_exam2.xlsx", col_names=F)
alpha <- matrix(c('a':'f'))
mat.b <- matrix(c(1:12),ncol=4) # ncol 옵션으로 4열의 값을 저장하는  matrix가 만들어집니다.
mat.b
alpha <- matrix(c('a','b','c','d','e','f'))
alpha
alpha <- matrix(c('a','b','c','d','e','f'),nrow=2)
alpha
alpha <- rbind(alpha, newRow)
newRow <- c('x','y','z')
alpha <- rbind(alpha, newRow)
alpha
vec1 <- c(1,2,3,4,5)
vec2 <- c(2,4,6,8,10)
vec3 <- c(3,6,9,12,15) # 어떻게 matrix로 만들어 줄 수 있을까??
#cbind() : 열 중심으로 백터값을 행렬로 만들어줌
mat.e <- cbind(vec1,vec2,vec3)
mat.e
alpha <- rbind(alpha, newRow)
alpha
alpha <- matrix(c('a','b','c','d','e','f'),nrow=2)
newRow <- c('x','y','z')
finalalpha <- rbind(alpha, newRow)
finalalpha
finalAlpha <- rbind(alpha, newRow)
finalAlpha.1 <- rbind(alpha, newRow)
colnames(finalAlpha) <- NULL
finalAlpha.1
rownames(finalAlpha) <- NULL
finalAlpha.1
rownames(finalAlpha) <- NULL
colnames(finalAlpha.1) <- NULL
rownames(finalAlpha.1) <- NULL
finalAlpha.1
# 문제1-3. 's', 'p' 라는 열을 추가합니다.
newCol <- c('s','p')
finalAlpha.2 <- cbind(finalAlpha.1,newCol)
colnames(finalAlpha.2) <- NULL
# 문제1-3. 's', 'p' 라는 열을 추가합니다.
newCol <- c('s','p','')
finalAlpha.2 <- cbind(finalAlpha.1,newCol)
colnames(finalAlpha.2) <- NULL
finalAlpha.2
d1 <- c(1:5)
d2 <- c(2:10,by=2)
df1 <- data.frame(d1,d2)
df1
d1 <- c(1:5)
d2 <- c(seq(2:10,by=2))
df1 <- data.frame(d1,d2)
df1
d1 <- c(seq(1,5))
d2 <- c(seq(2,10,by=2))
df1 <- data.frame(d1,d2)
df1
d3 <- c(seq(6,10))
df2 <- data.frame(df1,d3)
df2
d1 <- c(seq(1,5))
d2 <- c(seq('a','e')
df2 <- data.frame(d1,d2,d3)
d3 <- c(seq(6,10))
df2 <- data.frame(d1,d2,d3)
df2
d1 <- c(seq(1,5))
d2 <- c(seq('a','e'))
d3 <- c(seq(6,10))
df2 <- data.frame(d1,d2,d3)
df2
d1 <- c(seq(1,5))
d2 <- c(letters[1:5])
d3 <- c(seq(6,10))
df2 <- data.frame(d1,d2,d3)
df2
alpha <- matrix(letters[1:6],nrow=2)
alpha
finalAlpha.1 <- rbind(alpha, c('x','y','z'))
source('C:/KyoungPark/R/Day3.R', encoding = 'UTF-8', echo=TRUE)
finalAlpha.2 <- cbind(finalAlpha.1,newCol <- c('s','p',''))
finalAlpha.2
finalAlpha.2
finalAlpha.2 <- cbind(finalAlpha.1,newCol <- c('s','p'))
finalAlpha.2
df1 <- data.frame(x=1:5, y=seq(2,10,2))
df1
price <- c(1800,1500,3000)
amount <- c(24,38,13)
chart <- data.frame(x=price, y=amount)
chart
col1<-(seq(1,5))
col2 <- c(letters[1:5])
col3 <- c(seq(6,10))
df2 <- data.frame(col1,col2,col3)
df2
chart <- data.frame(제품 = c("사과", " 딸기", "수박"), 가격=c(1800,1500,3000), 판매량 = c(24,38,13))
chart
# 문제4-2. 앞에서 만든 데이터 프레임을 이용하여 과일 가격 평균, 판매량 평균을 구합니다.
min_df <- min(chart[,2])
min_df
# 문제4-2. 앞에서 만든 데이터 프레임을 이용하여 과일 가격 평균, 판매량 평균을 구합니다.
mean_df <- mean(chart[,2])
mean(chart[,3])
mean_df
name <- c("류정원", "김사과", "오렌지", "반하나", "이멜론")
gender <- factor(c("M", "F", "M", "F", "M"))
math <- c(85, 76, 99, 88, 40)
gender
member_df <- data,frame(name,gender,math, stringAsFactors=F)
member_df <- data.frame(name,gender,math, stringAsFactors=F)
member_df
member_df <- data.frame(name,gender,math)
member_df
class(member_df$name)
class(member_df$gender)
class(member_df$math)
member_df <- data.frame(name,gender,math, stringAsFactors=F)
member_df
member_df <- data.frame(name,gender,math, stringsAsFactors=F)
member_df
member_df$gender <- ifelse(member_df$gender == 'F','M','F')
member_df
member_df <- data.frame(member_df,stat)
stat <- c(76,73,95,82,35)
member_df <- data.frame(member_df,stat)
member_df
score <- member_df$math + member_df$stat
score
member_df$score <- member_df$math + member_df$stat
member_df
member_df$grdae <- switch(member_df$score >= 150, 'A', member_df$score >= 100, 'B', member_df$score >= 70, 'C')
member_df
member_df$grade <- switch(member_df$score >= 150, 'A', member_df$score >= 100, 'B', member_df$score >= 70, 'C')
member_df$grade <- ifelse(member_df$score >= 150, 'A', member_df$score >= 100, 'B', member_df$score >= 70, 'C')
member_df
member_df$grade <- ifelse(member_df$score >= 150, 'A', ifelse(member_df$score >= 100, 'B'), ifelse(member_df$score >= 70, 'C'))
member_df$grade <- ifelse(member_df$score >= 150, 'A', ifelse(member_df$score >= 100, 'B', ifelse(member_df$score >= 70, 'C',NA)))
member_df
arr1 <- array (c(1:24), dim=c(2,3,4))
arr1
# array 요소 접근 방법
# arr1[행, 열, matrix]
arr1[1]
# array 요소 접근 방법
# arr1[행, 열, matrix]
arr1[,,1]
arr1[1,,1] # 1번째 matrix의 첫번째 행 데이터 선택
arr1[,2,2] # 2번째 matrix의 두번째 열 데이터 선택
class(arr1[,2,2])
arr1[1,,] # 모든 matrix의 첫번째 행 데이터 선택
arr1[1,2,]# 모든 matrix의 1행 2열 데이터를 선택
vec1 <- 1
mat <- matrix(c(1:12),ncol=6)
df <- data.frame(x1=c(1,2,3), x2=letter(1:3))
arr <- array(c(1:20), dim=c(2,5,2))
df <- data.frame(x1=c(1,2,3), x2=letters(1:3))
df <- data.frame(x1=c(1,2,3), x2=letters[1:3])
source('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
li<- list(list1=vec, list2= mat, list3=df, list4=arr)
li<- list(list1=vec1, list2= mat, list3=df, list4=arr)
li
li<- list(list1=vec1, list2= mat, list3=arr, list4=df)
li
class(li)
df_var <- df_raw # 원본 데이터를 복사하여 df_raw 변수에 저장
# 파생변수 만들기 : 계산에 의해 데이터가 채워진 변수 (열)
df_raw <- data.frame(var1=c(1,2,1),var2=c(2,3,4))
df_var <- df_raw # 원본 데이터를 복사하여 df_raw 변수에 저장
df_var
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var3 = c(3,4,5)
df_var$var3
df_var
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var_sum <- df_var$var1 + df_var$var2
df_var$var_mean <- mean(df_var$var1,df_var$var2)
source('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var_sum <- df_var$var1 + df_var$var2
df_var$var_mean <- mean(df_var$var1,df_var$var2)
df_var
df_var$var_mean <- mean(df_var[,1])
df_var
df_var$var_mean <- mean(df_var$var1)
df_var
df_var$var_mean <- mean(df_var$var1)
df_var
df_var$var_mean <- mean(df_var$var1 + df_var$var2)
df_var
df_var$var_mean <- mean(df_var$var1[1,] + df_var$var2[1,])
df_var
df_var$var_mean <- mean(df_var$var1,df_var$var2)
df_var$var_mean[,] <- mean(df_var$var1,df_var$var2)
# 파생변수 만드는 방법
# 1. 데이터프레임$파생변수
df_var$var_sum <- df_var$var1 + df_var$var2
df_var$var_mean <- df_var$var_sum/2
df_var
excel_exam
excel_exam <- read_excel('excel_exam.xlsx',sheet=2)
excel_exam
df_excel_exam_copy$sum <- df_excel_exam_copy$math2 + df_excel_exam_copy$english2 + df_excel_exam_copy$science2
df_excel_exam_copy <- excel_exam
df_excel_exam_copy$sum <- df_excel_exam_copy$math2 + df_excel_exam_copy$english2 + df_excel_exam_copy$science2
df_excel_exam_copy
# 평균 파생변수
df_excel_exam_copy$var_mean <- df_excel_exam_copy$sum / 3
df_excel_exam_copy
# 함수
# subset() : 데이터프레임에서 특정 변수의 데이터만 뽑아낼 수 있다.
# subset(데이터프레임, select=시작변수명:끝변수명) # 연속적인 열 추출
# subset(데이터프레임, select=c(변수명, 변수명, ...)) #비 연속적인 열 추출
subset(df_excel_exam_copy, select=math2:science2)
subset(df_excel_exam_copy, select=c(math2,science2))
df_excel_exam_copy[,c('math2','science2')]
# rowSums(): 행의 ㅎ바을 계산할 수 있다.
df_excel_exam_copy$sum2 <- rowSums(subset(df_excel_exam_copy,select=math2:science2))
df_excel_exam_copy
df_excel_exam_copy_copy$PASS <- ifelse(df_excel_exam_copy$sum == df_excel_exam_copy$sum2, 'T', 'F')
df_excel_exam_copy_copy <- df_excel_exam_copy
df_excel_exam_copy_copy$PASS <- ifelse(df_excel_exam_copy$sum == df_excel_exam_copy$sum2, 'T', 'F')
df_excel_exam_copy_copy
# 2. 함수르 통한 파생변수 만들기 : transform()
# transform(데이터프레임, 파생변수이름=데이터)
df_excel_exam_copy <- transform(df_excel_exam_copy, sum3 = rowSums(subset(df_excel_exam_copy,select=math2:science2)))
rowSums(subset(df_excel_exam_copy,select=math2:science2))
source('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
df_excel_exam_copy
df_excel_exam_copy <- excel_exam
library(dplyr)
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
var_sum = rowSums(subset(df_excel_exam_copy,select=math2:science2)),
var_mean = rowMeans(subset(df_excel_exam_copy, select=math2:science2))
) # *****************************************
df_excel_exam_copy
df_excel_exam_copy$pass <- ifelse(df_excel_exam_copy$var_mean >= 60 , 'pass','fail')
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
grade = ifesle(var_mean>=90,'A',ifelse(var_mean>=80,'B',ifelse(var_mean>=70,'C',ifelse(var_mean>=60,'D','F'))))
)
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
grade = ifelse(var_mean>=90,'A',ifelse(var_mean>=80,'B',ifelse(var_mean>=70,'C',ifelse(var_mean>=60,'D','F'))))
)
df_excel_exam_copy
# 3. 함수를 통한 파생변수 만들기 : mutate() --> dplyr 패키지 안에 존재
# 한번에 여러개의 파생변수를 추가할 수 있다.
df_excel_exam_copy <- excel_exam
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
var_sum = rowSums(subset(df_excel_exam_copy,select=math2:science2)),
var_mean = rowMeans(subset(df_excel_exam_copy, select=math2:science2))
) # *****************************************
df_excel_exam_copy$result <- ifelse(df_excel_exam_copy$var_mean >= 60 , 'pass','fail')
df_excel_exam_copy <- df_excel_exam_copy %>% mutate(
grade = ifelse(var_mean>=90,'A',ifelse(var_mean>=80,'B',ifelse(var_mean>=70,'C',ifelse(var_mean>=60,'D','F'))))
)
df_excel_exam_copy # 확인
df_excel_exam_copy <- df_excel_exam
df_excel_exam_copy <- excel_exam
df_excel_exam_copy
df_excel_exam_copy_copy <- df_excel_exam_copy
# 함수
# filter() : 행 단위 데이터를 추출합니다.
df_excel_exam_copy %>% filter()
# 함수
# filter() : 행 단위 데이터를 추출합니다.
df_excel_exam_copy %>% filter(df_excel_exam_copy$class2 == 1)
df_excel_exam_copy %>%  filter(class2)
df_excel_exam_copy %>%  filter(class2 == 1 | class2 == 2 | class2 == 5)
# matching 연산자 in 과 c()함수를 이용하면 or 연산자와 같은 효과를 낼 수 있습니다.
df_excel_exam_copy %>%  filter(class %in% c(1,2,5))
# matching 연산자 in 과 c()함수를 이용하면 or 연산자와 같은 효과를 낼 수 있습니다.
df_excel_exam_copy %>%  filter(class2 %in% c(1,2,5))
install.packages(ggplot2)
# mpg 데이터를 활용하기 위해 ggplot2 패키지 설치
install.packages('ggplot2')
mpg
library(ggplot2)
mpg
# 제조사(manufacturer)가 audi인 조시주행연비(cty)의 평균을 출력
mpg_copy <- mpg
mpg_copy %>%  filter(manufacturer == 'audi')
mean(mpg_copy$cty)
mean(mpg_copy$cty)
# 제조사(manufacturer)가 audi인 조시주행연비(cty)의 평균을 출력
mpg_audi <- mpg %>%  filter(manufacturer == 'audi')
mean(mpg_copy$cty)
# 제조사(manufacturer)가 audi인 조시주행연비(cty)의 평균을 출력
mpg_audi <- mpg %>%  filter(manufacturer == 'audi')
mean(mpg_audi$cty)
# 제조사(manufacturer)가 toyota 인 도시주행연비(cty)의 평균을 출력
mpg_toyota <- mpg %>% filter(manufacturer == 'toyota')
mean(mpg_toyota$cty)
# 제조사가 chevrolet, ford, honda 인 자동차의 고속도록주행연비(hwy) 전체 평균 출력
mpg_ch_ford_honda <- mpg %>%  filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda')
mean(mpg_ch_ford_honda$hwy)
boxplot(mpg_ch_ford_honda)
boxplot(x=mpg_ch_ford_honda, y=mpg_ch_ford_honda)
# table() : 데이터의 항목(빈도수)
table(mpg_ch_ford_honda$manufacturer)
# select() : 열 단위 데이터 추출하기
df_excel_exam_copy %>% select(math2,english2,science2)
df_excel_exam_copy %>%  select2(-math2, -science2)
df_excel_exam_copy %>%  select(-math2, -science2)
# 문제
# class2가 1인 데이터 중에서 class2, math2 과목만 출력
df_excel_exam_copy %>% filter(class2==1) %>%  select(class2,math2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class=1|class2=3|class2=5) %>% select(class2,science2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class=1|class2=3|class2=5) %>% select(class2,science2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class==1|class2==3|class2==5) %>% select(class2,science2)
# class2가 1, 3, 5 인 데이터의 class2, science2 열만 출력
df_excel_exam_copy %>%  filter(class2==1|class2==3|class2==5) %>% select(class2,science2)
df_class135_science <-df_excel_exam_copy %>%  filter(class2 %in% c(1,3,5)) %>% select(class2,science2)
debugSource('C:/KyoungPark/R/Day4.R', encoding = 'UTF-8', echo=TRUE)
df_excel_exam_copy %>%  filter(class2 %in% c(1,3,5)) %>% select(class2,science2) # 두가지 방법 가능
df_class135_science <-df_excel_exam_copy %>%  filter(class2 %in% c(1,3,5)) %>% select(class2,science2)
df_class135_science
head(df_class135_science,3)
tail(df_class135_science,3)
# arrage() : 데이터를 정렬
df_excel_exam_copy %>% arrange(math2)
# arrange() : 데이터를 정렬
df_excel_exam_copy %>% arrange(math2) # 오름차순 정렬
df_excel_exam_copy %>% arrange(desc(math2)) # 내림차순 정렬
# math2 점수로 내림차순 후, math2 점수가 같을 경우, science2 점수로 내림차순 정렬 후 5등까지 출력
df_rank5_science2 <- df_excel_exam_copy %>% arrange(desc(math2)) %>%  filter(math2) %>% arrange(desc(science2))
# math2 점수로 내림차순 후, math2 점수가 같을 경우, science2 점수로 내림차순 정렬 후 5등까지 출력
df_rank5_science2 <- df_excel_exam_copy %>% arrange(desc(math2),desc(science2)) # 2차 정렬해줌
head(df_rank5_science2,5)
library(ggplot2)
mpg
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
source('C:/KyoungPark/R/Day5.R', encoding = 'UTF-8', echo=TRUE)
