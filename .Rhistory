df_wordCount$word <- gsub(" ","",df_wordCount$word)
top200 <- df_wordCount %>% head(200)
# RColorBrewer 패키지는 R에 내장된 패키지 입니다. brewer.pal() 함수를 사용해서 단어에 표시할 색 목록을 만듭니다.
# '팔레트 in r" 로 검색하거나 아래 url 참조
#   URL 붙여넣기
# brewer.pal(표현할 색상 개수, "팔레트 이름")
pal <- brewer.pal(8, "Dark2")
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 200,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
#freq = top200$freq,
#min.freq = 2,
max.word = 200,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
# 워드 클라우드로 구성할 단어를 추출합니다.
# 2음절 이상인 단어를 출현 빈도수의 내림차순으로 정렬해서 필요한 워드 클라우드로 구성할 단어를 추출합니다.
# nchar() : 글자의 개수를 셉니다.
df_wordCount <- df_wordCount %>% filter(nchar(word) >= 2)
# table 타입으로 생성된 단어별 빈도표를  as.data.frame() 함수를 사용해 데이터 프레임으로 변환합니다.
df_wordCount <- as.data.frame(wordCount)
# 데이터 프레임에서 데이터를 정제합니다.
# 숫자로만 구성된 단어와 단어에 포함된 모든 숫자가 제거됩니다.
# df_wordCount$word <- gsub("[[:digit:]]","",df_wordCount$word)
df_wordCount$word <- gsub("^[0-9]*$","",df_wordCount$word)
df_wordCount$word <- gsub(" ","",df_wordCount$word)
class(df_wordCount)
df_wordCount <- rename(df_wordCount, word = noun, frep = Freq)
# 데이터 프레임에서 데이터를 정제합니다.
# 숫자로만 구성된 단어와 단어에 포함된 모든 숫자가 제거됩니다.
# df_wordCount$word <- gsub("[[:digit:]]","",df_wordCount$word)
df_wordCount$word <- gsub("^[0-9]*$","",df_wordCount$word)
df_wordCount$word <- gsub(" ","",df_wordCount$word)
class(df_wordCount)
# 워드 클라우드로 구성할 단어를 추출합니다.
# 2음절 이상인 단어를 출현 빈도수의 내림차순으로 정렬해서 필요한 워드 클라우드로 구성할 단어를 추출합니다.
# nchar() : 글자의 개수를 셉니다.
df_wordCount <- df_wordCount %>% filter(nchar(word) >= 2)
top200 <- df_wordCount %>% arrange(desc(freq)) %>% head(200)
# 워드 클라우드 패키지를 설치합니다.
install.packages("wordcloud")
install.packages("wordcloud")
# extractNoun() 함수를 사용해 명사를 추출합니다. -> 결과는 vector로 리턴됩니다.
library(multilinguer)
library(KoNLP)
library(stringr)
# 데이터프레임의 변수 이름은 워드 클라우드 옵션에 맞게 변경합니다.
library(dplyr)
# 워드 클라우드로 구성할 단어를 추출합니다.
# 2음절 이상인 단어를 출현 빈도수의 내림차순으로 정렬해서 필요한 워드 클라우드로 구성할 단어를 추출합니다.
# nchar() : 글자의 개수를 셉니다.
df_wordCount <- df_wordCount %>% filter(nchar(word) >= 2)
top200 <- df_wordCount %>% arrange(desc(freq)) %>% head(200)
df_wordCount
top200 <- df_wordCount %>% head(200)
library(wordcloud)
# RColorBrewer 패키지는 R에 내장된 패키지 입니다. brewer.pal() 함수를 사용해서 단어에 표시할 색 목록을 만듭니다.
# '팔레트 in r" 로 검색하거나 아래 url 참조
#   URL 붙여넣기
# brewer.pal(표현할 색상 개수, "팔레트 이름")
pal <- brewer.pal(8, "Dark2")
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 200,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
###############################################################################################################################
# 행정안전부
# 애국가 실습
songtxt <- readLines('애국가(가사).txt')
class(songtxt)
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
# 1. 텍스트 파일을 읽어 변수에 저장한다.
song_txt <- readLines('애국가(가사).txt')
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
noun
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
noun
###############################################################################################################################
# 행정안전부
# 애국가 실습
useSejongDic()
# 1. 텍스트 파일을 읽어 변수에 저장한다.
song_txt <- readLines('애국가(가사).txt')
class(song_txt) # vector 형 데이터
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
noun
# 2.5 사전에 단어를 등록해준다.
add_words = c("백두산","하느님", "남산","철갑","구름","가을","하늘","달")
buildDictionary(user_dic=data.frame(add_words),rep("ncn",length(add_words)),replace_usr_dic = T)
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
# 2.5 사전에 단어를 등록해준다.
add_words = c("백두산","하느님", "남산","철갑","구름","가을","하늘","달")
buildDictionary(user_dic=data.frame(add_words),rep("ncn",length(add_words)),replace_usr_dic = T)
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
noun
###############################################################################################################################
# 행정안전부
# 애국가 실습
useSejongDic()  # 우리나라말 사전 등록
buildDictionary(user_dic=data.frame(add_words),rep("ncn",length(add_words)),replace_usr_dic = T)
buildDictionary(user_dic=data.frame(add_words,rep("ncn",length(add_words))),replace_usr_dic = T)
noun <- sapply(song_txt,extractNoun)
noun
noun <- unlist(noun)
song_wordCount <- table(noun)
head(df_song_wordCount)
head(df_song_wordCount,10)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
# 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
df_song_wordCount
# 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)
# 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
df_song_wordCount
topWord200 <- df_song_wordCount %>% arrange(desc(freq)) %>% head(200)
noun <- unlist(noun)
song_wordCount <- table(noun)
song_wordCount <- table(noun)
noun <- Filter(function(x) {nchar(x) >=2},noun)
noun
noun <- sapply(song_txt,extractNoun)
# 3. list르 풀어준다.
class(noun)
noun <- unlist(noun)
song_wordCount <- table(noun)
noun <- Filter(function(x) {nchar(x) >=2},noun)
noun <- sapply(song_txt,extractNoun)
noun <- unlist(noun)
song_wordCount <- table(noun)
song_wordCount
sort(df_song_wordCount,decreasing = T)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)
# 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
sort(df_song_wordCount,decreasing = T)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T)
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
df_song_wordCount
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)
df_song_wordCount$word
df_song_wordCount
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)
df_song_wordCount
topWord200 <- df_song_wordCount %>% arrange(desc(freq)) %>% head(200)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)
topWord200 <- df_song_wordCount %>% arrange(desc(freq)) %>% head(200)
topWord200 <- df_song_wordCount %>% arrange(desc(freq))
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord200$word,
freq = topWord200$freq,
min.freq = 1,
max.word = 10,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
topWord200 <- df_song_wordCount %>% arrange(desc(freq))
# dplyr 패키지 이용하여 열의 이름을 바꿔준다.
library(dplyr)
topWord200 <- df_song_wordCount %>% arrange(desc(freq))
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
topWord200 <- df_song_wordCount %>% arrange(desc(freq))
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
noun <- unlist(noun)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
topWord200 <- df_song_wordCount %>% arrange(desc(freq))
df_song_wordCount
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)  # 숫자를 삭제
df_song_wordCount
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)         # 빈칸을 삭제
df_song_wordCount
df_song_wordCount$word <- gsub("  ","",df_song_wordCount$word)         # 빈칸을 삭제
df_song_wordCount
# brewer.pal(표현할 색상 개수, "팔레트 이름")
pal <- brewer.pal(10, "Dark2")
# brewer.pal(표현할 색상 개수, "팔레트 이름")
pal <- brewer.pal(8, "Dark2")
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord200$word,    # 표시할 단어 목록
freq = topWord200$freq,     # 단어의 출현 빈도
min.freq = 1,  # 단어의 최소 개수
max.word = 10, # 단어의 최대 개수
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(8, 1), # 워드 클라우드의 단어 크기
colors = pal     # 단어의 표시할 색상 목록이 저장된 팔레트트
)
install.packages("wordcloud2")
library(wordcloud2)
wordcloud2(topWord, fontFamily = "맑은 고딕")
topWord <- df_song_wordCount %>% arrange(desc(freq))
wordcloud2(topWord, fontFamily = "맑은 고딕", size=1.2, color='random-light', backgroundColor = 'black', shape='star')
freq
df_song_wordCount
# 1. 텍스트 파일을 읽어 변수에 저장한다.
song_txt <- readLines('애국가(가사).txt')
class(song_txt) # vector 형 데이터
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
# 2.5 사전에 단어를 등록해준다.
add_words = c("백두산","하느님", "남산","철갑","구름","가을","하늘","달")
buildDictionary(user_dic=data.frame(add_words,rep("ncn",length(add_words))),replace_usr_dic = T)
noun <- sapply(song_txt,extractNoun)
# 3. list르 풀어준다.
class(noun)
noun <- unlist(noun)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
topWord <- df_song_wordCount %>% arrange(desc(freq))
# 1. 텍스트 파일을 읽어 변수에 저장한다.
song_txt <- readLines('애국가(가사).txt')
class(song_txt) # vector 형 데이터
# 2.5 사전에 단어를 등록해준다.
add_words = c("백두산","하느님", "남산","철갑","구름","가을","하늘","달")
buildDictionary(user_dic=data.frame(add_words,rep("ncn",length(add_words))),replace_usr_dic = T)
noun <- sapply(song_txt,extractNoun)
noun
# 3. list르 풀어준다.
class(noun)
noun <- unlist(noun)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
df_song_wordCount <- rename(df_song_wordCount, word = noun, frep = Freq)
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)  # 숫자를 삭제
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)         # 빈칸을 삭제
df_song_wordCount
# 3.5 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
df_song_wordCount
topWord <- df_song_wordCount %>% arrange(desc(freq))
df_song_wordCount <- rename(df_song_wordCount, word = noun, freq = Freq)
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)  # 숫자를 삭제
df_song_wordCount$word <- gsub(" ","",df_song_wordCount$word)         # 빈칸을 삭제
# 3.5 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
topWord <- df_song_wordCount %>% arrange(desc(freq))
df_song_wordCount
topWord <- df_song_wordCount %>% arrange(desc(frep))
topWord
#------크롤링에 많이 쓰이는 다른 방법--------#
# sapply(): 행렬구조의 데이터에서 모든 행에 함수를 적용할 사용하는 함수입니다.
# sapply(데이터, 적용할 할수)
noun <- sapply(song_txt,extractNoun)
noun <- sapply(song_txt,extractNoun)
noun <- unlist(noun)
song_wordCount <- table(noun)
sort(song_wordCount,decreasing = T) # sorting 시킨다.
# 3.5 data.frame으로 바꿔준다.
df_song_wordCount <- as.data.frame(song_wordCount)
head(df_song_wordCount,10)
# dplyr 패키지 이용하여 열의 이름을 바꿔준다.
library(dplyr)
df_song_wordCount <- rename(df_song_wordCount, word = noun, freq = Freq)
df_song_wordCount$word <- gsub("^[0-9]*$","",df_song_wordCount$word)  # 숫자를 삭제
# 3.5 단어를 filtering 해준다.
# df_song_wordCount <- Filter(function(x) {nchar(x) >=2},df_song_wordCount)
df_song_wordCount <- df_song_wordCount %>%  filter(nchar(word)>=2)  # 2 자 이상
topWord <- df_song_wordCount %>% arrange(desc(freq))
# brewer.pal(표현할 색상 개수, "팔레트 이름")
pal <- brewer.pal(8, "Dark2")
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord$word,    # 표시할 단어 목록
freq = topWord$freq,     # 단어의 출현 빈도
min.freq = 1,  # 단어의 최소 개수
max.word = 10, # 단어의 최대 개수
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(8, 1), # 워드 클라우드의 단어 크기
colors = pal     # 단어의 표시할 색상 목록이 저장된 팔레트트
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord$word,    # 표시할 단어 목록
freq = topWord$freq,     # 단어의 출현 빈도
min.freq = 1,  # 단어의 최소 개수
max.word = 10, # 단어의 최대 개수
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(8, 0.4), # 워드 클라우드의 단어 크기
colors = pal     # 단어의 표시할 색상 목록이 저장된 팔레트트
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord$word,    # 표시할 단어 목록
freq = topWord$freq,     # 단어의 출현 빈도
min.freq = 1,  # 단어의 최소 개수
max.word = 10, # 단어의 최대 개수
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(58, 0.4), # 워드 클라우드의 단어 크기
colors = pal     # 단어의 표시할 색상 목록이 저장된 팔레트트
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord$word,    # 표시할 단어 목록
freq = topWord$freq,     # 단어의 출현 빈도
min.freq = 1,  # 단어의 최소 개수
max.word = 10, # 단어의 최대 개수
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.4), # 워드 클라우드의 단어 크기
colors = pal     # 단어의 표시할 색상 목록이 저장된 팔레트트
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = topWord$word,    # 표시할 단어 목록
freq = topWord$freq,     # 단어의 출현 빈도
min.freq = 1,  # 단어의 최소 개수
max.word = 10, # 단어의 최대 개수
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 1), # 워드 클라우드의 단어 크기
colors = pal     # 단어의 표시할 색상 목록이 저장된 팔레트트
)
install.packages("wordcloud2")
library(wordcloud2)
wordcloud2(topWord, fontFamily = "맑은 고딕", size=0.8, color='random-light', backgroundColor = 'black', shape='star')
# 형태소 분석 작업을 실행할 데이터를 읽어옵니다.
txt <- readLines('hiphop.txt')
class(txt)
library(stringr)
#str_replace_all(변수, "찾을 문자열", "바꿀 문자열")
txt <- str_replace_all(txt, "\\W","")
#[:punct:] (출력 가능한 (눈에 보이는) 특수 문자)      # 위 3가지 다양한 함수(같은역할)
txt <- gsub("[[:punct:]]","", txt)
txt <- gsub("[[:punct:][:digit:]]", "" ,txt) # --> 숫자랑 특수문자만 제거
# extractNoun() 함수를 사용해서 명사를 출력합니다.
noun <- extractNoun(txt)
noun <- unlist(noun) # list 타입을 unlist 로 바꿔준다.
# table() 함수를 이용해 단어 빈도표를 만들어준다.
table(noun)
wordCount <- table(noun)
# table 타입으로 생성된 단어별 빈도표를  as.data.frame() 함수를 사용해 데이터 프레임으로 변환합니다.
df_wordCount <- as.data.frame(wordCount)
head(df_wordCount,10)
df_wordCount <- rename(df_wordCount, word = noun, freq = Freq)
# 데이터 프레임에서 데이터를 정제합니다.
# 숫자로만 구성된 단어와 단어에 포함된 모든 숫자가 제거됩니다.
# df_wordCount$word <- gsub("[[:digit:]]","",df_wordCount$word)
df_wordCount$word <- gsub("^[0-9]*$","",df_wordCount$word)
df_wordCount$word <- gsub(" ","",df_wordCount$word)
class(df_wordCount)
# 워드 클라우드로 구성할 단어를 추출합니다.
# 2음절 이상인 단어를 출현 빈도수의 내림차순으로 정렬해서 필요한 워드 클라우드로 구성할 단어를 추출합니다.
# nchar() : 글자의 개수를 셉니다.
df_wordCount <- df_wordCount %>% filter(nchar(word) >= 2)
top200 <- df_wordCount %>% arrange(desc(freq)) %>% head(200)
# RColorBrewer 패키지는 R에 내장된 패키지 입니다. brewer.pal() 함수를 사용해서 단어에 표시할 색 목록을 만듭니다.
# '팔레트 in r" 로 검색하거나 아래 url 참조
#   URL 붙여넣기
# brewer.pal(표현할 색상 개수, "팔레트 이름")
pal <- brewer.pal(8, "Dark2")
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 200,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 200,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
# top200 <- df_wordCount %>% head(200)
top200 <- df_wordCount %>% arrange(desc(freq)) %>% head(200)
top200
# top200 <- df_wordCount %>% head(200)
top200 <- df_wordCount %>% arrange(desc(freq)) %>% head(20)
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 200,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
source('C:/KyoungPark/R/Day8.R', encoding = 'UTF-8', echo=TRUE)
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 20,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
# 워드 클라우드를 만듭니다.
wordcloud(
words = top200$word,
freq = top200$freq,
min.freq = 2,
max.word = 20,
rot.per = 0.1, # 단어의 회전 비율(10% 설정)
random.order = F, # 빈도수 높은 단어를 중앙에 정렬 옵션 -- False  시킴
scale = c(5, 0.5), # 워드 클라우드의 단어 크기
colors = pal
)
###############################################################################################################################
# 행정안전부
# 애국가 실습
useSejongDic()  # 우리나라말 사전 등록
