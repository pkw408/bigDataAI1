coord_flip() +
ylim(0,1000) +
xlab("직업") +
ylab("평균급여") +
ggtitle("직업별 하위 35개의 평균 급여 그래프") # 차트 제목
##########################################################################################################
# 문제 1
# 직업이 "정보시스템 개발 전문가(0222) 일 경우 나이별 평균 급여는 얼마인가?? (막대 그래프로 표현)
# 문제 2
# 직업이 "정보시스템 개발 전문가(0222) 일 경우 나이별, 성별별 평균 급여는 얼마인가( 막대그래프 표현, 색으로 성별 표현)
# 문제 3
# 성별별로 어떤 직업에 종사하는 사람이 많을까?
# 3-1 성별별 직업 빈도표르 만든다. (막대그래프 표현)
# 3-2 남자 직업 빈도표를 만듭니다.
# 3-3 여자 직업 빈도표를 만듭니다.
# 3-4 남자 연령대 (young) 직업 빈도표를 만듭니다.
# 3-5 여자 연령대 (young) 직업 빈도표를 만듭니다.
# http://st.koreaedugroup.com/
##########################################################################################################
# 문제 1
# 직업이 "정보시스템 개발 전문가(0222) 일 경우 나이별 평균 급여는 얼마인가?? (막대 그래프로 표현)
welfare_copy <- welfare
welfare_copy <- left_join(welfare_copy,job_list,by='code_job')
table(welfare_copy$code_job)
table(welfare_copy$job)
welfare_copy <- welfare_copy %>% mutate(
age = 2015 - birth
)
job_developer <- welfare_copy %>% filter(code_job == 0222 & !is.na(code_job) & !is.na(income)) %>%
select(job,age,income) %>% group_by(age) %>% summarise(mean_income = mean(income))
ggplot(data=job_developer,aes(x=age,y=mean_income)) + geom_col() +
ylim(0,1000) +
xlab("나이") +
ylab("평균급여") +
ggtitle("정보시스템 개발 전문가 겨우, 나이별 평균 급여")
##########################################################################################################
# 문제 2
# 직업이 "정보시스템 개발 전문가(0222) 일 경우 나이별, 성별 평균 급여는 얼마인가( 막대그래프 표현, 색으로 성별 표현)
job_developer <- welfare_copy %>% filter(code_job == 0222 & !is.na(code_job) & !is.na(income)) %>%
group_by(age,gender) %>% summarise(mean_income = mean(income))
ggplot(data=job_developer,aes(x=age,y=mean_income,fill=gender)) + geom_col(position ='dodge') +
ylim(0,1000) +
xlab("나이") +
ylab("평균급여") +
ggtitle("정보시스템 개발 전문가 겨우, 나이별 평균 급여")
##########################################################################################################
# 문제 3
# 성별별로 어떤 직업에 종사하는 사람이 많을까?
# 3-1 성별별 직업 빈도표르 만든다. (막대그래프 표현)
welfare_copy <- welfare
welfare_copy <- left_join(welfare_copy,job_list,by='code_job')
welfare_copy$job
jobCount_gender <- welfare_copy %>% filter(!is.na(job)) %>%
group_by(gender,job) %>%
summarise( n = n()) %>%
arrange(desc(n)) %>%
head(20)
ggplot(data=jobCount_gender,aes(x=reorder(job,n),y=n), fill = gender) + geom_col(position='dodge') +
coord_flip() +
ggtitle("성별별 직업빈도표표")
# coord_flip()을 사용해서 그래프를 회전시키지 않고 theme()함수를 사용해서 x축 레이블을 회전시킬수 있다.
ggplot(data=jobCount_gender,aes(x=reorder(job,n),y=n), fill = gender) +
geom_col(position = 'dodge') +
xlab("") +
theme(axis.text.x = element_text(angle= -90))
##########################################################################################################
# 3-2 남자 직업 빈도표를 만듭니다.
jobCount_male <- welfare_copy %>% filter(!is.na(job) & gender == 'male') %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
jobCount_male$job
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=count)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수')
ggtitle("남성 직업 빈도표")
##########################################################################################################
# 3-3 여자 직업 빈도표를 만듭니다.
jobCount_female <- welfare_copy %>% filter(!is.na(job) & gender == 'female') %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
jobCount_female$job
ggplot(data=jobCount_female,aes(x=reorder(job,n),y=count)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수')
ggtitle("여성 직업 빈도표")
##########################################################################################################
# 3-4 남자 연령대 (young) 직업 빈도표를 만듭니다.
male_young <- welfare_copy %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old')))
male_young <- male_young %>% filter(!is.na(job) & gender == 'male' & age_group == 'young') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
ggplot(data=male_young,aes(x=reorder(job,n),y=n)) + geom_col() +
coord_flip()
##########################################################################################################
# 3-5 여자 연령대 (young) 직업 빈도표를 만듭니다.
female_young <- welfare_copy %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old')))
female_young <- female_young %>% filter(!is.na(job) & gender == 'female' & age_group == 'young') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
ggplot(data=female_young,aes(x=reorder(job,n),y=n)) + geom_col() +
coord_flip()
# 혼인상태 전처리
# 혼인상태 데이터는 파생변수를 만들어 혼인상태를 별도로 저장합니다.
# 파생변수이름: marriage_group
# 혼인유지중: marriage(1,4) / 이혼 : divorce(3), 나머지: NA
welfare_copy_copy$marriage_group <- ifelse(welfare_copy_copy$marriage %n% c(1,4), 'marriage',ifelse(welfare_copy_copy$marriage == 4, 'divorce', NA))
# 혼인상태 전처리
# 혼인상태 데이터는 파생변수를 만들어 혼인상태를 별도로 저장합니다.
# 파생변수이름: marriage_group
# 혼인유지중: marriage(1,4) / 이혼 : divorce(3), 나머지: NA
welfare_copy_copy$marriage_group <- ifelse(welfare_copy_copy$marriage %in% c(1,4), 'marriage',ifelse(welfare_copy_copy$marriage == 4, 'divorce', NA))
table(welfare_copy_copy$marriage_group)
table(welfare_copy_copy$marriage_group)
# 혼인상태 전처리
# 혼인상태 데이터는 파생변수를 만들어 혼인상태를 별도로 저장합니다.
# 파생변수이름: marriage_group
# 혼인유지중: marriage(1,4) / 이혼 : divorce(3), 나머지: NA
welfare_copy_copy$marriage_group <- ifelse(welfare_copy_copy$marriage %in% c(1,4), 'marriage',ifelse(welfare_copy_copy$marriage == 3, 'divorce', NA))
table(welfare_copy_copy$marriage_group)
talbe(is.na(welfare_copy_copy$marriage_group))
table(is.na(welfare_copy_copy$marriage_group))
ggplot(data=jobCount_gender,aes(x=reorder(job,n),y=n), fill = gender) + geom_col(position='dodge') +
coord_flip() +
ggtitle("성별별 직업빈도표표")
jobCount_gender
ggplot(data=jobCount_gender,aes(x=reorder(job,n),y=n), fill = gender) + geom_col(position='dodge') +
coord_flip() +
ggtitle("성별별 직업빈도표표")
welfare_copy$job
jobCount_gender$job
ggplot(data=jobCount_gender,aes(x=reorder(job,n),y=n, fill = gender)) + geom_col(position='dodge') +
coord_flip() +
ggtitle("성별별 직업빈도표표")
# coord_flip()을 사용해서 그래프를 회전시키지 않고 theme()함수를 사용해서 x축 레이블을 회전시킬수 있다.
ggplot(data=jobCount_gender,aes(x=reorder(job,n),y=n, fill = gender)) +
geom_col(position = 'dodge') +
xlab("인원수") +
theme(axis.text.x = element_text(angle= -90))
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=count)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수')
##########################################################################################################
# 3-2 남자 직업 빈도표를 만듭니다.
jobCount_male <- welfare_copy %>% filter(!is.na(job) & gender == 'male') %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=count)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수')
##########################################################################################################
# 3-2 남자 직업 빈도표를 만듭니다.
jobCount_male <- welfare_copy %>% filter(!is.na(job) & gender == 'male') %>%
group_by(job)
##########################################################################################################
# 3-2 남자 직업 빈도표를 만듭니다.
jobCount_male <- welfare_copy %>% filter(!is.na(job) & gender == 'male') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
jobCount_male$job
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=count)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수')
jobCount_male
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=count)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수') +
ggtitle("남성 직업 빈도표")
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=n)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수') +
ggtitle("남성 직업 빈도표")
##########################################################################################################
# 3-3 여자 직업 빈도표를 만듭니다.
jobCount_female <- welfare_copy %>% filter(!is.na(job) & gender == 'female') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(30)
jobCount_female$job
ggplot(data=jobCount_female,aes(x=reorder(job,n),y=n)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수')
ggplot(data=jobCount_male,aes(x=reorder(job,n),y=n)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수') +
ggtitle("남성 직업 빈도표")
ggplot(data=jobCount_female,aes(x=reorder(job,n),y=n)) + geom_col() +
coord_flip() +
xlab('직업') +
ylab('인원수') +
ggtitle("여성 직업 빈도표")
# 종교 유무에 따른 이혼률을 표로 만들어줍니다.
religion_marriage <- welfare_copy_copy %>%  filter(!is.na(marriage_group)) %>%
group_by(religion, marriage_group) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100))
ggplot(data = religion_marriage, aes(x=religion, y=pct), fill = group_marraige) + geom_col(position='dodge')
# 종교 유무에 따른 이혼률을 표로 만들어줍니다.
religion_marriage <- welfare_copy_copy %>%  filter(!is.na(marriage_group)) %>%
group_by(religion, marriage_group) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100))
ggplot(data = religion_marriage, aes(x=religion, y=pct), fill = group_marraige) + geom_col(position='dodge')
religion_marriage
ggplot(data = religion_marriage, aes(x=religion, y=pct), fill = marraige_group) + geom_col(position='dodge')
ggplot(data = religion_marriage, aes(x=religion, y=pct), fill = marriage_group) + geom_col(position='dodge')
ggplot(data = religion_marriage, aes(x=religion, y=pct), fill = marriage_group) + geom_col(position='dodge')
ggplot(data = religion_marriage, aes(x=religion, y=pct, fill = marriage_group) + geom_col(position='dodge')
ggplot(data = religion_marriage, aes(x=religion, y=pct, fill = marriage_group) + geom_col(position='dodge')
ggplot(data = religion_marriage, aes(x=religion, y=pct, fill = marriage_group)) + geom_col(position='dodge')
source('C:/KyoungPark/R/Day7.R', encoding = 'UTF-8', echo=TRUE)
religion_marriage
ggplot(data = religion_marriage, aes(x=marriage_group, y=pct, fill = religion)) + geom_col(position='dodge')
age_group_marriage <- welfare_copy_copy %>%  filter(!is.na(marriage_group)) %>%
mutate(age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(age_group,marriage_group) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100,1))
ggplot(data=age_group_marriage, aes(x=age_group, y=n, fill=marriage_group)) + geom_col()
ggplot(data=age_group_marriage, aes(x=age_group, y=n, fill=marriage_group)) + geom_col(position='dodge') +
scale_x_discrete(limit=x('young','middle','old'))
ggplot(data=age_group_marriage, aes(x=age_group, y=n, fill=marriage_group)) + geom_col(position='dodge') +
scale_x_discrete(limit=c('young','middle','old'))
ggplot(data=age_group_marriage, aes(x=marriage_group, y=n, fill=age_group)) +
geom_col(position='dodge') +
scale_x_discrete(limit=c('marriage','divorce'))
##########################################################################################################
# 주제: 지역 전처리
talbe(welfare_copy_copy$code_region)
##########################################################################################################
# 주제: 지역 전처리
table(welfare_copy_copy$code_region)
welfare_region <- welfare_copy_copy
welfare_region$code_region
table(welfare_region$code_region)
welfare_region <- ifelse(welfare_region$code_region < 1 | welfare_region$code_region > 7. NA, welfare_region$code_region)
table(welfare_region$code_region)
welfare_region <- ifelse(welfare_region$code_region < 1 | welfare_region$code_region > 7, NA, welfare_region$code_region)
table(welfare_region$code_region)
table(welfare_region$code_region)
welfare_region <- ifelse(welfare_region$code_region < 1 | welfare_region$code_region > 7, NA, welfare_region$code_region)
welfare_region <- welfare_copy_copy
welfare_region <- ifelse(welfare_region$code_region < 1 | welfare_region$code_region > 7, NA, welfare_region$code_region)
table(welfare_region$code_region)
list_region <- data.frame(code_region = c(1:7), region = c('서울','수도권(인천/경기)','부산/경남/울산', '대구/경북','대전/충남','강원/충북','광주/전남/전부/제주도'))
# welfare_region와 list_region을 left_join()함수로 code_region변수를 기준으로 결합합니다.
welfare_region <- left_join(welfare_region,list_region, by='code_region')
# welfare_region와 list_region을 left_join()함수로 code_region변수를 기준으로 결합합니다.
welfare_region <- left_join(welfare_region,list_region, by='code_region')
welfare_region %>% select(code_region, region)
table(welfare_region$region)
welfare_region <- welfare_copy_copy
##########################################################################################################
# 주제: 지역 전처리
table(welfare_copy_copy$code_region)
welfare_region$code_region
table(welfare_region$code_region)
list_region <- data.frame(code_region = c(1:7), region = c('서울','수도권(인천/경기)','부산/경남/울산', '대구/경북','대전/충남','강원/충북','광주/전남/전부/제주도'))
# welfare_region와 list_region을 left_join()함수로 code_region변수를 기준으로 결합합니다.
welfare_region <- left_join(welfare_region,list_region, by='code_region')
welfare_region %>% select(code_region, region)
table(welfare_region$region)
# 어떤 지역에 어떤 연령대가 많이 사는가?
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region)
age_region
# 어떤 지역에 어떤 연령대가 많이 사는가?
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group)
age_region
# 어떤 지역에 어떤 연령대가 많이 사는가?
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group) %>%
summarise(n=n()) %>%
arrange(desc(n))
age_region
ggplot(data=age_region, aes(x=region, y=n, fill=age_group)) + geom_col()
ggplot(data=age_region, aes(x=region, y=n, fill=age_group)) + geom_col(position='dodge')
ggplot(data=age_region, aes(x=region, y=n, fill=age_group)) + geom_col(position='dodge') +
ggtile("지역별 연령대 그래프") +
xlab("지역") +
ylab("인구수")
ggplot(data=age_region, aes(x=region, y=n, fill=age_group)) + geom_col(position='dodge') +
ggtitle("지역별 연령대 그래프") +
xlab("지역") +
ylab("인구수")
ggplot(data=age_region, aes(x=reorde(region,n), y=n, fill=age_group)) + geom_col(position='dodge') +
ggtitle("지역별 연령대 그래프") +
xlab("지역") +
ylab("인구수")
ggplot(data=age_region, aes(x=reorder(region,n), y=n, fill=age_group)) + geom_col(position='dodge') +
ggtitle("지역별 연령대 그래프") +
xlab("지역") +
ylab("인구수")
ggplot(data=age_region, aes(x=reorder(age_group,n), y=n, fill=region)) + geom_col(position='dodge') +
ggtitle("지역별 연령대 그래프") +
xlab("연령별") +
ylab("인구수")
##########################################################################################################
# 주졔 : 어떤 지역에 어떤 연령대가 많이 사는가?
# 지역별, 연령대별 비율표를 만듭니다.
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group) %>%
mutate( pct = n / round(sum(n) * 100,1))
##########################################################################################################
# 주졔 : 어떤 지역에 어떤 연령대가 많이 사는가?
# 지역별, 연령대별 비율표를 만듭니다.
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
summarise(n=n()) %>%
arrange(desc(n))
ggplot(data=age_region, aes(x=reorder(region,n), y=pct, fill=age_group)) + geom_col(position='dodge') +
coord_flip()
##########################################################################################################
# 주졔 : 어떤 지역에 어떤 연령대가 많이 사는가?
# 지역별, 연령대별 비율표를 만듭니다.
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
summarise(n=n()) %>%
arrange(desc(n))
##########################################################################################################
# 주졔 : 어떤 지역에 어떤 연령대가 많이 사는가?
# 지역별, 연령대별 비율표를 만듭니다.
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
arrange(desc(n))
ggplot(data=age_region, aes(x=reorder(region,n), y=pct, fill=age_group)) + geom_col(position='dodge') +
coord_flip()
ggplot(data=age_region, aes(x=reorder(region,n), y=pct, fill=age_group)) + geom_col(position='dodge') +
coord_flip()
##########################################################################################################
# 주졔 : 어떤 지역에 어떤 연령대가 많이 사는가?
# 지역별, 연령대별 비율표를 만듭니다.
age_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
group_by(region,age_group) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
arrange(desc(n))
age_region
ggplot(data=age_region, aes(x=reorder(region,n), y=pct, fill=age_group)) + geom_col(position='dodge') +
coord_flip()
ggplot(data=age_region, aes(x=reorder(region,n), y=pct, fill=age_group)) + geom_col(position='dodge') +
coord_flip() +
ggtitle("지역별 연령대 그래프") +
xlab("지역") +
ylab("인구수")
##########################################################################################################
# 주제: 연령대가 young 인 사람들이 많이 사는 지경느 어디일까??
young_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
filter(age_group == 'young') %>%
group(region) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
arrange(desc(n))
##########################################################################################################
# 주제: 연령대가 young 인 사람들이 많이 사는 지경느 어디일까??
young_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
filter(age_group == 'young') %>%
group(region) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
arrange(desc(n))
##########################################################################################################
# 주제: 연령대가 young 인 사람들이 많이 사는 지경느 어디일까??
young_region <- welfare_region %>% mutate(
age_group = ifelse(age <30, 'young',ifelse(age<60,'middle','old'))) %>%
filter(age_group == 'young') %>%
group_by(region) %>%
summarise(n=n()) %>%
mutate( pct = n / round(sum(n) * 100,1)) %>%
arrange(desc(n))
young_region
ggplot(data=young_region, aes(x=region, y=n)) +geom_col()
ggplot(data=young_region, aes(x=region, y=n)) +geom_col() +
ggtitle("young인 사람들의 지역분포")
ggplot(data=young_region, aes(x=region, y=n)) +geom_col() +
coord_flip() +
ggtitle("젊은 사람들의 지역분포")
##########################################################################################################
# 주제: 연령대가 young 인 사람들이 많이 사는 지역 어디일까??
young_region <- age_region %>% filter(age_group == 'young')
ggplot(data=young_region, aes(x=region, y=n)) +geom_col() +
coord_flip() +
ggtitle("젊은 사람들의 지역분포")
ggplot(data=young_region, aes(x=region, y=n)) +geom_col() +
coord_flip() +
ggtitle("젊은 사람들의 지역분포")
# x 축 레이블 출력 순서를 별도로 저장합니다.
order_young_list <- young_region$region
ggplot(data=young_region, aes(x=region, y=n)) +geom_col() +
coord_flip() +
ggtitle("젊은 사람들의 지역분포") +
scale_x_discrete(limit=order_young_list)
order_young_list
# 주제: 연령대가 middle인 사람들이 많이 사는 지역은 어디일까?
middle_region <- age_region %>%  filter(age_group == 'middle') %>% arrange(pct)
middle_region
ggplot(data=middle_region, aes(reorder(region,pct),pct)) +geom_col(position = 'dodge') +
coord_flip() +
ggtitle("중년 사람들의 지역분포") +
xlab("지역") +
ylab("비율")
order_middle_list <- middle_region
ggplot(data=middle_region, aes(reorder(region,pct),pct)) +geom_col(position = 'dodge') +
coord_flip() +
ggtitle("중년 사람들의 지역분포") +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_middle_list)
order_middle_list <- middle_region$region
ggplot(data=middle_region, aes(reorder(region,pct),pct)) +geom_col(position = 'dodge') +
coord_flip() +
ggtitle("중년 사람들의 지역분포") +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_middle_list)
class(age_region$age_group)
# age_group은 factor가 아니기 때문에 levels() 함수를 실행하면 NULL이 출력됩니다.
level(age_region$age_group)
# age_group은 factor가 아니기 때문에 levels() 함수를 실행하면 NULL이 출력됩니다.
levels(age_region$age_group)
age_region$age_group <- factore(age_region$age_group)
class(age_region$age_group)
age_region$age_group <- factor(age_region$age_group)
class(age_region$age_group)
levels(age_region$age_group)
# factor() ㅎ마수의 levels  옵션으로 범주 순서를 지정할 수 있다.
age_region$age_group <- factor(age_region$age_group, levels = c('young','middle','old'))
levels(age_region$age_group) # middle old young
ggplot(data=age_region, aes(region,pct,fill=age_group)) +
geom_col(position = 'dodge') +
coord_flip() +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_middle_list)
ggplot(data=age_region, aes(region,pct,fill=age_group)) +
geom_col(position = 'dodge') +
coord_flip() +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_young_list)
# factor() ㅎ마수의 levels  옵션으로 범주 순서를 지정할 수 있다.
age_region$age_group <- factor(age_region$age_group, levels = c('young','old','middle'))
ggplot(data=age_region, aes(region,pct,fill=age_group)) +
geom_col(position = 'dodge') +
coord_flip() +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_young_list)
ggplot(data=age_region, aes(region,pct,fill=age_group)) +
geom_col(position = 'dodge') +
coord_flip() +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_middle_list)
ggplot(data=age_region, aes(region,pct,fill=age_group)) +
geom_col(position = 'dodge') +
coord_flip() +
xlab("지역") +
ylab("비율") +
scale_x_discrete(limit = order_young_list)
# koNLP 를 설치하기 위한 준비
# 1. 자바가 컴퓨터에 설치되어 있어야하고 아래 패키지를 설치하고 로드합니다.
# java, rJava설치
install.packages("multilinguer")
library(multilinguer)
install_jdk()
# 의존성패키지 설치 (KoNLP 사용을 위해)
install.packages(c("stringr","hash","tau","Sejong","RSQLite","devtools"),type="binary")
# github 버전 설치
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP',upgrade="never",INSTALL_opts = c("--no-multiarch"))
# 문제가 있을시 기존 Module을 날려주고 다시 깔아준다.
library("KoNLP")
useSystemDic()
useSejongDic()
useSejongDic("hello")
useNIADic()
